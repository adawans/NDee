var particles = [];
var colliders = [];
var tree = null;
var monkeyVerts = [0.4375,0.164062,0.765625,-0.4375,0.164062,0.765625,0.5,0.09375,0.6875,-0.5,0.09375,0.6875,0.546875,0.0546875,0.578125,-0.546875,0.0546875,0.578125,0.351562,-0.0234375,0.617188,-0.351562,-0.0234375,0.617188,0.351562,0.03125,0.71875,-0.351562,0.03125,0.71875,0.351562,0.132812,0.78125,-0.351562,0.132812,0.78125,0.273438,0.164062,0.796875,-0.273438,0.164062,0.796875,0.203125,0.09375,0.742188,-0.203125,0.09375,0.742188,0.15625,0.0546875,0.648438,-0.15625,0.0546875,0.648438,0.078125,0.242188,0.65625,-0.078125,0.242188,0.65625,0.140625,0.242188,0.742188,-0.140625,0.242188,0.742188,0.242188,0.242188,0.796875,-0.242188,0.242188,0.796875,0.273438,0.328125,0.796875,-0.273438,0.328125,0.796875,0.203125,0.390625,0.742188,-0.203125,0.390625,0.742188,0.15625,0.4375,0.648438,-0.15625,0.4375,0.648438,0.351562,0.515625,0.617188,-0.351562,0.515625,0.617188,0.351562,0.453125,0.71875,-0.351562,0.453125,0.71875,0.351562,0.359375,0.78125,-0.351562,0.359375,0.78125,0.4375,0.328125,0.765625,-0.4375,0.328125,0.765625,0.5,0.390625,0.6875,-0.5,0.390625,0.6875,0.546875,0.4375,0.578125,-0.546875,0.4375,0.578125,0.625,0.242188,0.5625,-0.625,0.242188,0.5625,0.5625,0.242188,0.671875,-0.5625,0.242188,0.671875,0.46875,0.242188,0.757812,-0.46875,0.242188,0.757812,0.476562,0.242188,0.773438,-0.476562,0.242188,0.773438,0.445312,0.335938,0.78125,-0.445312,0.335938,0.78125,0.351562,0.375,0.804688,-0.351562,0.375,0.804688,0.265625,0.335938,0.820312,-0.265625,0.335938,0.820312,0.226562,0.242188,0.820312,-0.226562,0.242188,0.820312,0.265625,0.15625,0.820312,-0.265625,0.15625,0.820312,0.351562,0.242188,0.828125,-0.351562,0.242188,0.828125,0.351562,0.117188,0.804688,-0.351562,0.117188,0.804688,0.445312,0.15625,0.78125,-0.445312,0.15625,0.78125,0,0.429688,0.742188,0,0.351562,0.820312,0,-0.679688,0.734375,0,-0.320312,0.78125,0,-0.1875,0.796875,0,-0.773438,0.71875,0,0.40625,0.601562,0,0.570312,0.570312,0,0.898438,-0.546875,0,0.5625,-0.851562,0,0.0703125,-0.828125,0,-0.382812,-0.351562,0.203125,-0.1875,0.5625,-0.203125,-0.1875,0.5625,0.3125,-0.4375,0.570312,-0.3125,-0.4375,0.570312,0.351562,-0.695312,0.570312,-0.351562,-0.695312,0.570312,0.367188,-0.890625,0.53125,-0.367188,-0.890625,0.53125,0.328125,-0.945312,0.523438,-0.328125,-0.945312,0.523438,0.179688,-0.96875,0.554688,-0.179688,-0.96875,0.554688,0,-0.984375,0.578125,0.4375,-0.140625,0.53125,-0.4375,-0.140625,0.53125,0.632812,-0.0390625,0.539062,-0.632812,-0.0390625,0.539062,0.828125,0.148438,0.445312,-0.828125,0.148438,0.445312,0.859375,0.429688,0.59375,-0.859375,0.429688,0.59375,0.710938,0.484375,0.625,-0.710938,0.484375,0.625,0.492188,0.601562,0.6875,-0.492188,0.601562,0.6875,0.320312,0.757812,0.734375,-0.320312,0.757812,0.734375,0.15625,0.71875,0.757812,-0.15625,0.71875,0.757812,0.0625,0.492188,0.75,-0.0625,0.492188,0.75,0.164062,0.414062,0.773438,-0.164062,0.414062,0.773438,0.125,0.304688,0.765625,-0.125,0.304688,0.765625,0.203125,0.09375,0.742188,-0.203125,0.09375,0.742188,0.375,0.015625,0.703125,-0.375,0.015625,0.703125,0.492188,0.0625,0.671875,-0.492188,0.0625,0.671875,0.625,0.1875,0.648438,-0.625,0.1875,0.648438,0.640625,0.296875,0.648438,-0.640625,0.296875,0.648438,0.601562,0.375,0.664062,-0.601562,0.375,0.664062,0.429688,0.4375,0.71875,-0.429688,0.4375,0.71875,0.25,0.46875,0.757812,-0.25,0.46875,0.757812,0,-0.765625,0.734375,0.109375,-0.71875,0.734375,-0.109375,-0.71875,0.734375,0.117188,-0.835938,0.710938,-0.117188,-0.835938,0.710938,0.0625,-0.882812,0.695312,-0.0625,-0.882812,0.695312,0,-0.890625,0.6875,0,-0.195312,0.75,0,-0.140625,0.742188,0.101562,-0.148438,0.742188,-0.101562,-0.148438,0.742188,0.125,-0.226562,0.75,-0.125,-0.226562,0.75,0.0859375,-0.289062,0.742188,-0.0859375,-0.289062,0.742188,0.398438,-0.046875,0.671875,-0.398438,-0.046875,0.671875,0.617188,0.0546875,0.625,-0.617188,0.0546875,0.625,0.726562,0.203125,0.601562,-0.726562,0.203125,0.601562,0.742188,0.375,0.65625,-0.742188,0.375,0.65625,0.6875,0.414062,0.726562,-0.6875,0.414062,0.726562,0.4375,0.546875,0.796875,-0.4375,0.546875,0.796875,0.3125,0.640625,0.835938,-0.3125,0.640625,0.835938,0.203125,0.617188,0.851562,-0.203125,0.617188,0.851562,0.101562,0.429688,0.84375,-0.101562,0.429688,0.84375,0.125,-0.101562,0.8125,-0.125,-0.101562,0.8125,0.210938,-0.445312,0.710938,-0.210938,-0.445312,0.710938,0.25,-0.703125,0.6875,-0.25,-0.703125,0.6875,0.265625,-0.820312,0.664062,-0.265625,-0.820312,0.664062,0.234375,-0.914062,0.632812,-0.234375,-0.914062,0.632812,0.164062,-0.929688,0.632812,-0.164062,-0.929688,0.632812,0,-0.945312,0.640625,0,0.046875,0.726562,0,0.210938,0.765625,0.328125,0.476562,0.742188,-0.328125,0.476562,0.742188,0.164062,0.140625,0.75,-0.164062,0.140625,0.75,0.132812,0.210938,0.757812,-0.132812,0.210938,0.757812,0.117188,-0.6875,0.734375,-0.117188,-0.6875,0.734375,0.078125,-0.445312,0.75,-0.078125,-0.445312,0.75,0,-0.445312,0.75,0,-0.328125,0.742188,0.09375,-0.273438,0.78125,-0.09375,-0.273438,0.78125,0.132812,-0.226562,0.796875,-0.132812,-0.226562,0.796875,0.109375,-0.132812,0.78125,-0.109375,-0.132812,0.78125,0.0390625,-0.125,0.78125,-0.0390625,-0.125,0.78125,0,-0.203125,0.828125,0.046875,-0.148438,0.8125,-0.046875,-0.148438,0.8125,0.09375,-0.15625,0.8125,-0.09375,-0.15625,0.8125,0.109375,-0.226562,0.828125,-0.109375,-0.226562,0.828125,0.078125,-0.25,0.804688,-0.078125,-0.25,0.804688,0,-0.289062,0.804688,0.257812,-0.3125,0.554688,-0.257812,-0.3125,0.554688,0.164062,-0.242188,0.710938,-0.164062,-0.242188,0.710938,0.179688,-0.3125,0.710938,-0.179688,-0.3125,0.710938,0.234375,-0.25,0.554688,-0.234375,-0.25,0.554688,0,-0.875,0.6875,0.046875,-0.867188,0.6875,-0.046875,-0.867188,0.6875,0.09375,-0.820312,0.710938,-0.09375,-0.820312,0.710938,0.09375,-0.742188,0.726562,-0.09375,-0.742188,0.726562,0,-0.78125,0.65625,0.09375,-0.75,0.664062,-0.09375,-0.75,0.664062,0.09375,-0.8125,0.640625,-0.09375,-0.8125,0.640625,0.046875,-0.851562,0.632812,-0.046875,-0.851562,0.632812,0,-0.859375,0.632812,0.171875,0.21875,0.78125,-0.171875,0.21875,0.78125,0.1875,0.15625,0.773438,-0.1875,0.15625,0.773438,0.335938,0.429688,0.757812,-0.335938,0.429688,0.757812,0.273438,0.421875,0.773438,-0.273438,0.421875,0.773438,0.421875,0.398438,0.773438,-0.421875,0.398438,0.773438,0.5625,0.351562,0.695312,-0.5625,0.351562,0.695312,0.585938,0.289062,0.6875,-0.585938,0.289062,0.6875,0.578125,0.195312,0.679688,-0.578125,0.195312,0.679688,0.476562,0.101562,0.71875,-0.476562,0.101562,0.71875,0.375,0.0625,0.742188,-0.375,0.0625,0.742188,0.226562,0.109375,0.78125,-0.226562,0.109375,0.78125,0.179688,0.296875,0.78125,-0.179688,0.296875,0.78125,0.210938,0.375,0.78125,-0.210938,0.375,0.78125,0.234375,0.359375,0.757812,-0.234375,0.359375,0.757812,0.195312,0.296875,0.757812,-0.195312,0.296875,0.757812,0.242188,0.125,0.757812,-0.242188,0.125,0.757812,0.375,0.0859375,0.726562,-0.375,0.0859375,0.726562,0.460938,0.117188,0.703125,-0.460938,0.117188,0.703125,0.546875,0.210938,0.671875,-0.546875,0.210938,0.671875,0.554688,0.28125,0.671875,-0.554688,0.28125,0.671875,0.53125,0.335938,0.679688,-0.53125,0.335938,0.679688,0.414062,0.390625,0.75,-0.414062,0.390625,0.75,0.28125,0.398438,0.765625,-0.28125,0.398438,0.765625,0.335938,0.40625,0.75,-0.335938,0.40625,0.75,0.203125,0.171875,0.75,-0.203125,0.171875,0.75,0.195312,0.226562,0.75,-0.195312,0.226562,0.75,0.109375,0.460938,0.609375,-0.109375,0.460938,0.609375,0.195312,0.664062,0.617188,-0.195312,0.664062,0.617188,0.335938,0.6875,0.59375,-0.335938,0.6875,0.59375,0.484375,0.554688,0.554688,-0.484375,0.554688,0.554688,0.679688,0.453125,0.492188,-0.679688,0.453125,0.492188,0.796875,0.40625,0.460938,-0.796875,0.40625,0.460938,0.773438,0.164062,0.375,-0.773438,0.164062,0.375,0.601562,0,0.414062,-0.601562,0,0.414062,0.4375,-0.09375,0.46875,-0.4375,-0.09375,0.46875,0,0.898438,0.289062,0,0.984375,-0.078125,0,-0.195312,-0.671875,0,-0.460938,0.1875,0,-0.976562,0.460938,0,-0.804688,0.34375,0,-0.570312,0.320312,0,-0.484375,0.28125,0.851562,0.234375,0.0546875,-0.851562,0.234375,0.0546875,0.859375,0.320312,-0.046875,-0.859375,0.320312,-0.046875,0.773438,0.265625,-0.4375,-0.773438,0.265625,-0.4375,0.460938,0.4375,-0.703125,-0.460938,0.4375,-0.703125,0.734375,-0.046875,0.0703125,-0.734375,-0.046875,0.0703125,0.59375,-0.125,-0.164062,-0.59375,-0.125,-0.164062,0.640625,-0.0078125,-0.429688,-0.640625,-0.0078125,-0.429688,0.335938,0.0546875,-0.664062,-0.335938,0.0546875,-0.664062,0.234375,-0.351562,0.40625,-0.234375,-0.351562,0.40625,0.179688,-0.414062,0.257812,-0.179688,-0.414062,0.257812,0.289062,-0.710938,0.382812,-0.289062,-0.710938,0.382812,0.25,-0.5,0.390625,-0.25,-0.5,0.390625,0.328125,-0.914062,0.398438,-0.328125,-0.914062,0.398438,0.140625,-0.757812,0.367188,-0.140625,-0.757812,0.367188,0.125,-0.539062,0.359375,-0.125,-0.539062,0.359375,0.164062,-0.945312,0.4375,-0.164062,-0.945312,0.4375,0.21875,-0.28125,0.429688,-0.21875,-0.28125,0.429688,0.210938,-0.226562,0.46875,-0.210938,-0.226562,0.46875,0.203125,-0.171875,0.5,-0.203125,-0.171875,0.5,0.210938,-0.390625,0.164062,-0.210938,-0.390625,0.164062,0.296875,-0.3125,-0.265625,-0.296875,-0.3125,-0.265625,0.34375,-0.148438,-0.539062,-0.34375,-0.148438,-0.539062,0.453125,0.867188,-0.382812,-0.453125,0.867188,-0.382812,0.453125,0.929688,-0.0703125,-0.453125,0.929688,-0.0703125,0.453125,0.851562,0.234375,-0.453125,0.851562,0.234375,0.460938,0.523438,0.429688,-0.460938,0.523438,0.429688,0.726562,0.40625,0.335938,-0.726562,0.40625,0.335938,0.632812,0.453125,0.28125,-0.632812,0.453125,0.28125,0.640625,0.703125,0.0546875,-0.640625,0.703125,0.0546875,0.796875,0.5625,0.125,-0.796875,0.5625,0.125,0.796875,0.617188,-0.117188,-0.796875,0.617188,-0.117188,0.640625,0.75,-0.195312,-0.640625,0.75,-0.195312,0.640625,0.679688,-0.445312,-0.640625,0.679688,-0.445312,0.796875,0.539062,-0.359375,-0.796875,0.539062,-0.359375,0.617188,0.328125,-0.585938,-0.617188,0.328125,-0.585938,0.484375,0.0234375,-0.546875,-0.484375,0.0234375,-0.546875,0.820312,0.328125,-0.203125,-0.820312,0.328125,-0.203125,0.40625,-0.171875,0.148438,-0.40625,-0.171875,0.148438,0.429688,-0.195312,-0.210938,-0.429688,-0.195312,-0.210938,0.890625,0.40625,-0.234375,-0.890625,0.40625,-0.234375,0.773438,-0.140625,-0.125,-0.773438,-0.140625,-0.125,1.03906,-0.101562,-0.328125,-1.03906,-0.101562,-0.328125,1.28125,0.0546875,-0.429688,-1.28125,0.0546875,-0.429688,1.35156,0.320312,-0.421875,-1.35156,0.320312,-0.421875,1.23438,0.507812,-0.421875,-1.23438,0.507812,-0.421875,1.02344,0.476562,-0.3125,-1.02344,0.476562,-0.3125,1.01562,0.414062,-0.289062,-1.01562,0.414062,-0.289062,1.1875,0.4375,-0.390625,-1.1875,0.4375,-0.390625,1.26562,0.289062,-0.40625,-1.26562,0.289062,-0.40625,1.21094,0.078125,-0.40625,-1.21094,0.078125,-0.40625,1.03125,-0.0390625,-0.304688,-1.03125,-0.0390625,-0.304688,0.828125,-0.0703125,-0.132812,-0.828125,-0.0703125,-0.132812,0.921875,0.359375,-0.21875,-0.921875,0.359375,-0.21875,0.945312,0.304688,-0.289062,-0.945312,0.304688,-0.289062,0.882812,-0.0234375,-0.210938,-0.882812,-0.0234375,-0.210938,1.03906,0,-0.367188,-1.03906,0,-0.367188,1.1875,0.09375,-0.445312,-1.1875,0.09375,-0.445312,1.23438,0.25,-0.445312,-1.23438,0.25,-0.445312,1.17188,0.359375,-0.4375,-1.17188,0.359375,-0.4375,1.02344,0.34375,-0.359375,-1.02344,0.34375,-0.359375,0.84375,0.289062,-0.210938,-0.84375,0.289062,-0.210938,0.835938,0.171875,-0.273438,-0.835938,0.171875,-0.273438,0.757812,0.09375,-0.273438,-0.757812,0.09375,-0.273438,0.820312,0.0859375,-0.273438,-0.820312,0.0859375,-0.273438,0.84375,0.015625,-0.273438,-0.84375,0.015625,-0.273438,0.8125,-0.015625,-0.273438,-0.8125,-0.015625,-0.273438,0.726562,0,-0.0703125,-0.726562,0,-0.0703125,0.71875,-0.0234375,-0.171875,-0.71875,-0.0234375,-0.171875,0.71875,0.0390625,-0.1875,-0.71875,0.0390625,-0.1875,0.796875,0.203125,-0.210938,-0.796875,0.203125,-0.210938,0.890625,0.242188,-0.265625,-0.890625,0.242188,-0.265625,0.890625,0.234375,-0.320312,-0.890625,0.234375,-0.320312,0.8125,-0.015625,-0.320312,-0.8125,-0.015625,-0.320312,0.851562,0.015625,-0.320312,-0.851562,0.015625,-0.320312,0.828125,0.078125,-0.320312,-0.828125,0.078125,-0.320312,0.765625,0.09375,-0.320312,-0.765625,0.09375,-0.320312,0.84375,0.171875,-0.320312,-0.84375,0.171875,-0.320312,1.03906,0.328125,-0.414062,-1.03906,0.328125,-0.414062,1.1875,0.34375,-0.484375,-1.1875,0.34375,-0.484375,1.25781,0.242188,-0.492188,-1.25781,0.242188,-0.492188,1.21094,0.0859375,-0.484375,-1.21094,0.0859375,-0.484375,1.04688,0,-0.421875,-1.04688,0,-0.421875,0.882812,-0.015625,-0.265625,-0.882812,-0.015625,-0.265625,0.953125,0.289062,-0.34375,-0.953125,0.289062,-0.34375,0.890625,0.109375,-0.328125,-0.890625,0.109375,-0.328125,0.9375,0.0625,-0.335938,-0.9375,0.0625,-0.335938,1,0.125,-0.367188,-1,0.125,-0.367188,0.960938,0.171875,-0.351562,-0.960938,0.171875,-0.351562,1.01562,0.234375,-0.375,-1.01562,0.234375,-0.375,1.05469,0.1875,-0.382812,-1.05469,0.1875,-0.382812,1.10938,0.210938,-0.390625,-1.10938,0.210938,-0.390625,1.08594,0.273438,-0.390625,-1.08594,0.273438,-0.390625,1.02344,0.4375,-0.484375,-1.02344,0.4375,-0.484375,1.25,0.46875,-0.546875,-1.25,0.46875,-0.546875,1.36719,0.296875,-0.5,-1.36719,0.296875,-0.5,1.3125,0.0546875,-0.53125,-1.3125,0.0546875,-0.53125,1.03906,-0.0859375,-0.492188,-1.03906,-0.0859375,-0.492188,0.789062,-0.125,-0.328125,-0.789062,-0.125,-0.328125,0.859375,0.382812,-0.382812,-0.859375,0.382812,-0.382812];

var materialModel = new THREE.MeshLambertMaterial( {color:0x76BDDA} );
//materialModel.opacity = 0.2;

function initParticles() {

	var cube = new NDee.PlaneGeometry ( 0.5, 0.5, 0.5 );		
	material = new THREE.MeshPhongMaterial( {color:0xEEFFFF, specular:0xFFFFFF , shininess: 0 ,perPixel: false} );

	for (var i = 0; i < 800; i++) {
		var mesh = new THREE.Mesh( cube, material );

		mesh.position.x = ( Math.random() - 0.5 ) * 100;
		mesh.position.y = ( Math.random() - 0.5 ) * 100;
		mesh.position.z = ( Math.random() - 0.5 ) * 100;

		mesh.matrixAutoUpdate = false;
		mesh.updateMatrix();

		scene.add( mesh );

		var particle = {};
		particle.mesh = mesh;
		particle.velocity = new THREE.Vector3((Math.random()-1) * 8, (Math.random()-1) * 8, (Math.random()-1) * 8) ;
		particles.push(particle);
	}

	var config = {
		"k": 3,
		"maxCapacity": 20,
		"collisionTest": function ( aabb, v ) {
			return 	v.x >= aabb.min.coords[0] && v.x <= aabb.max.coords[0] &&
					v.y >= aabb.min.coords[1] && v.y <= aabb.max.coords[1] &&
					v.z >= aabb.min.coords[2] && v.z <= aabb.max.coords[2];
		},
		"medianBounds": new NDee.AABB( new NDee.Vector( 3 ),  new NDee.Vector( 3 ) ),
		"medianVect": new NDee.Vector( 3 ),
		"getMedian": function ( items, dimension ) {
			var bounds = this.medianBounds;
			bounds.makeEmpty()
			for ( var i = items.length; i--; ) {
				this.medianVect.set(items[i].x, items[i].y, items[i].z);
				bounds.expandByPoint( this.medianVect );
			}
			return bounds.min.coords[dimension] + ( ( bounds.max.coords[dimension] - bounds.min.coords[dimension] ) * 0.5 );
		}
	};

	tree = new NDee.KDTree( config );

	for ( var i = 0; i < monkeyVerts.length; ) {
		var vect = new THREE.Vector3( monkeyVerts[i++] , monkeyVerts[i++],  monkeyVerts[i++] ).multiplyScalar( 25 );
		vect.isMesh = true;
		tree.add( vect );
		colliders.push(vect);
	}

	for ( var i = particles.length; i--; ) {
		tree.add( particles[i].mesh.position );
	}
}

function updateParticles() {

	var query = {
		"bounds": new NDee.AABB( new NDee.Vector( 3 ),  new NDee.Vector( 3 ) ),
		"buffer": new NDee.Vector( 3 ),
		"collides": function ( aabb ) {
			return aabb.isIntersectionAABB( this.bounds );
		},
		"results": [],
		"addResults": function(items) {
			var min = this.bounds.min.coords;
			var max = this.bounds.max.coords;
			var item;
			for ( var i = items.length; i--; ) {
				item = items[i];
				var outside = 	item.x < min[0] ||
								item.x > max[0] ||
								item.y < min[1] ||
								item.y > max[1] ||
								item.z < min[2] ||
								item.z > max[2];
				if ( !outside ) {
					this.results.push( item );
				}
			}
		}
	};
	
	for ( var i = particles.length; i--; ) {
		var pos = particles[i].mesh.position;
		var radius = Math.random() * 7;
		query.bounds.min.set( pos.x - radius , pos.y - radius, pos.z - radius );
		query.bounds.max.set( pos.x + radius , pos.y + radius, pos.z + radius );
		query.results = [];

		if ( radius > 0.1 ) {
			tree.queryCollision( query );
			//query.addResults( colliders );
		}
			
		updateParticle( particles[i], query.results );
	}
}

function updateParticle( particle, neighbors ) {
	var buffer = new THREE.Vector3( 3 );
	var oldPos = new THREE.Vector3( 3 ).copy( particle.mesh.position );

	var mesh = particle.mesh;
	var position = particle.mesh.position;
	var velocity = particle.velocity;
	var veloLength = velocity.length();

	buffer.copy(position).multiplyScalar(-Math.sqrt(mesh.position.length()) / 5000);
	velocity.add(buffer, velocity);

	var bestDirection = new THREE.Vector3( 0, 0, 0 );
	var bestCos = Infinity;
	var bestDist = 2;
	var isMesh = false;
	for ( var i = 0; i < neighbors.length; i++ ) {
		if ( !isMesh || neighbors[i].isMesh ) {
			buffer.copy( neighbors[i] );
			buffer.sub( mesh.position, buffer );

			var dot = buffer.dot( velocity );
			if ( dot < 0.3 ) {
				var cos = dot / buffer.length() / veloLength;
				if ( cos < bestCos || ( neighbors[i].isMesh && !isMesh ) ) {
					bestCos = cos;
					bestDirection.copy( buffer );
					isMesh = neighbors[i].isMesh;
				}
			}
		}
	}

	if ( isMesh ) {
		if ( mesh.scale.x < 0.9 )
			mesh.scale.multiplyScalar( 1.0009 );
	} else {
		if ( mesh.scale.x > 0.4 )
			mesh.scale.multiplyScalar( 0.9985 );
	}

	bestDirection.multiplyScalar( isMesh ? -0.1 : -0.1 );
	velocity.add( bestDirection, velocity );

	velocity.setLength( veloLength );

	buffer.copy( velocity ).multiplyScalar( 0.02 );
	mesh.position.add(buffer, mesh.position);

	var matrix = new THREE.Matrix4();
	matrix.extractRotation( mesh.matrix );
	var direction = new THREE.Vector3( 0, 0, 1 );
	matrix.multiplyVector3( direction );

	buffer.copy(mesh.position);
	buffer.add(velocity, buffer);
	buffer.add(direction.multiplyScalar( 80 ), buffer);
	mesh.lookAt(buffer);

	mesh.updateMatrix();

	tree.move( mesh.position, oldPos );
}